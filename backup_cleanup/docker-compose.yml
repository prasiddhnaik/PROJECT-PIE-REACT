version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: financial_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - financial_network

  # Data Service
  data-service:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    container_name: financial_data_service
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=data-service
      - PORT=8002
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      - POLYGON_API_KEY=${POLYGON_API_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # Chart Service
  chart-service:
    build:
      context: ./services/chart-service
      dockerfile: Dockerfile
    container_name: financial_chart_service
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=chart-service
      - PORT=8003
      - REDIS_URL=redis://redis:6379
      - DATA_SERVICE_URL=http://data-service:8002
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      data-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # Graph Service  
  graph-service:
    build:
      context: ./services/graph-service
      dockerfile: Dockerfile
    container_name: financial_graph_service
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=graph-service
      - PORT=8004
      - REDIS_URL=redis://redis:6379
      - DATA_SERVICE_URL=http://data-service:8002
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      data-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # AI Service
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: financial_ai_service
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=ai-service
      - PORT=8005
      - REDIS_URL=redis://redis:6379
      - DATA_SERVICE_URL=http://data-service:8002
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      data-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: financial_api_gateway
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=api-gateway
      - PORT=8001
      - REDIS_URL=redis://redis:6379
      - DATA_SERVICE_URL=http://data-service:8002
      - CHART_SERVICE_URL=http://chart-service:8003
      - GRAPH_SERVICE_URL=http://graph-service:8004
      - AI_SERVICE_URL=http://ai-service:8005
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      data-service:
        condition: service_healthy
      chart-service:
        condition: service_healthy
      ai-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # API Monitor Service
  api-monitor:
    build:
      context: ./services/api-monitor
      dockerfile: Dockerfile
    container_name: financial_api_monitor
    ports:
      - "8006:8006"
    environment:
      - SERVICE_NAME=api-monitor
      - PORT=8006
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PROVIDER_REGISTRY_PATH=/app/config/provider_registry.yaml
      - HEALTH_CHECK_TIMEOUT=10
      - HEALTH_CHECK_RETRIES=3
      - CIRCUIT_BREAKER_THRESHOLD=5
      - CIRCUIT_BREAKER_TIMEOUT=300
      - LOG_LEVEL=INFO
      # API Keys for provider health checks
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      - POLYGON_API_KEY=${POLYGON_API_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      - TWELVE_DATA_API_KEY=${TWELVE_DATA_API_KEY:-}
      - IEX_CLOUD_API_KEY=${IEX_CLOUD_API_KEY:-}
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY:-}
      - NEWSAPI_KEY=${NEWSAPI_KEY:-}
    volumes:
      - ./config:/app/config:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: financial_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - financial_network

  # Grafana for dashboards and alerting
  grafana:
    image: grafana/grafana:10.0.0
    container_name: financial_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - financial_network

  # Frontend (React)
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: financial_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_MONITOR_URL=http://localhost:8006
      - NODE_ENV=development
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - financial_network

  # Legacy Backend (for compatibility during transition)
  backend-legacy:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: financial_backend_legacy
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      - POLYGON_API_KEY=${POLYGON_API_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - MICROSERVICES_MODE=false
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - legacy  # Only start when explicitly requested
    networks:
      - financial_network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  financial_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
 
 
 